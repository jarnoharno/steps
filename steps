#!/usr/bin/env groovy

if (!args) {
  println 'Usage: steps args...'
  System.exit(1)
}

def run(Object... objs) {
  def cmd = objs.join(' ')
  println(cmd)
  cmd.execute()
}

def receiver = 'com.hiit.steps/.StepsReceiver'
def adb = 'adb'

def devices = run(adb, 'devices').text.split('\n').drop(1)
  .collect({ it.split()[0] })

adb += ' -s ' + devices[0]

def storage = run(adb, 'shell echo \$EXTERNAL_STORAGE').text.trim()
storage += '/Android/data/com.hiit.steps/files'

def params() {
  ret = []
  for (int i = 1; i < args.size(); ++i) {
    switch (args[i]) {
      // time in seconds
      case '-t':
        def us = (args[++i].toDouble() * 1e6).intValue()
        ret.push('--el max_timestamp ' + us + '000')
        break;
      // rate in milliseconds
      case '-r':
        def us = args[++i].toInteger() * 1000
        ret.push('--ei rate_us ' + us)
        break;
    }
  }
  return ret
}

def broadcast(Object... objs) {
  def out = run(*objs).text
  def rows = (out =~ /result=(-?\d*)/)[0][1]
  def output = (out =~ /data="([^"]*)"/)
  println(rows)
  if (output) {
    output = output[0][1]
    println(output)
  }
}

switch (args[0]) {
case 'pull':
  def pulls = args.drop(1).collect({ storage + '/' + it })
  if (!pulls)
    pulls = [ storage ]
  pulls.each({
    print(run(adb, 'pull', it, 'data').err.text)
  })
  break
case 'start':
  run(adb, 'shell am broadcast -a start', *params(), receiver)
  break
case 'stop':
  broadcast(adb, 'shell am broadcast -a stop', receiver)
  break
case 'run':
  broadcast(adb, 'shell am broadcast -a run', *params(), receiver)
  break
default:
  print(run(adb, 'shell cd', storage, '&&', *args).text)
}
